<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on The Dizzy Coder</title>
    <link>https://resc.github.io/tags/c/</link>
    <description>Recent content in C# on The Dizzy Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>remco.schoeman&#43;nospambotsplease@gmail.com (Remco Schoeman)</managingEditor>
    <webMaster>remco.schoeman&#43;nospambotsplease@gmail.com (Remco Schoeman)</webMaster>
    <lastBuildDate>Sat, 25 Jun 2016 19:03:05 +0200</lastBuildDate>
    <atom:link href="https://resc.github.io/tags/c" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Generate All The Things</title>
      <link>https://resc.github.io/post/generate-all-the-things/</link>
      <pubDate>Sat, 25 Jun 2016 19:03:05 +0200</pubDate>
      <author>remco.schoeman&#43;nospambotsplease@gmail.com (Remco Schoeman)</author>
      <guid>https://resc.github.io/post/generate-all-the-things/</guid>
      <description>&lt;p&gt;Coding is a lot of work, and sometimes it gets repetitive too. I don&amp;rsquo;t like repetitive work so most of my projects grow some kind of code generator.
Usually it starts with a unit test that outputs a simple class definition, and before you know it, it generates a complete data-access layer with &lt;a href=&#34;http://nhibernate.info/&#34;&gt;NHibernate&lt;/a&gt; mappings in &lt;a href=&#34;http://www.fluentnhibernate.org/&#34;&gt;FluentNHibernate&lt;/a&gt; that generate SQL create scripts&amp;hellip; but that&amp;rsquo;s a story for another post.&lt;/p&gt;

&lt;p&gt;So, here&amp;rsquo;s my default &amp;lsquo;plan&amp;rsquo; for building ad-hoc code generators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a test project&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.internalsvisibletoattribute(v=vs.110).aspx&#34;&gt;InternalsVisibleTo&lt;/a&gt; attribute to the target project with the assembly name of the test project, so that the test project can access methods and properties defined as internal in the target project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// expose internals to the test project.
[assembly: InternalsVisibleTo(&amp;quot;GenerateAllTheThings.Tests&amp;quot;, AllInternalsVisible = true)]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a class &lt;code&gt;Source&lt;/code&gt; to get the location of the source code using the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.callerfilepathattribute(v=vs.110).aspx&#34;&gt;CallerFilePath&lt;/a&gt; attribute.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;/// &amp;lt;summary&amp;gt;
/// Source contains methods to find the source file 
/// and directory at the time of compilation.
/// &amp;lt;/summary&amp;gt;
public static class Source
{
    /// &amp;lt;summary&amp;gt; 
    /// Returns the source file path of the method that calls FilePath, 
    /// do not supply any arguments, the compiler will do that for you. 
    /// &amp;lt;/summary&amp;gt;
    public static string FilePath([CallerFilePath] string callerFilePath = null)
    {
        return callerFilePath;
    }

    /// &amp;lt;summary&amp;gt; 
    /// returns the directory of the source file
    /// of the method that calls Directory.
    /// &amp;lt;/summary&amp;gt;
    public static string Directory([CallerFilePath] string callerFilePath = null)
    {
        return System.IO.Path.GetDirectoryName(callerFilePath);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;put an internal static property &lt;code&gt;SourceDirectory&lt;/code&gt; on any class in the target directory for the code generator like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;internal static string SourceDirectory
{
    get { return Source.Directory(); }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create at least two types that you want to generate code for immediately, this prevents overspecialization of the generator.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a test class named &lt;code&gt;Generator&lt;/code&gt; with a unit test called &lt;code&gt;Generate&lt;/code&gt; that generates some code for classes using the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/mt656691.aspx&#34;&gt;reflection api&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Don&amp;rsquo;t be afraid, embrace the &lt;a href=&#34;http://www.imdb.com/title/tt1375666/&#34;&gt;Inception effect&lt;/a&gt; (a.k.a. &lt;a href=&#34;https://en.wikipedia.org/wiki/Recursion_(computer_science)&#34;&gt;recursion&lt;/a&gt;), generate types that the generator uses to generate more types. But stop if your brain starts hurting, it&amp;rsquo;s a sign you&amp;rsquo;ve taken this too far.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Think about the conventions and project folder structure you want to use. Code generators are good tools to promote uniformity in coding and naming conventions, but those conventions have to be in place before they can be leveraged.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the generated files to the project, the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/wa80x488.aspx&#34;&gt;partial&lt;/a&gt; keyword is your friend if you want to attach generated code to an existing class.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If the generator generates gibberish, correct the code in the generated file, and copy-paste the working code back into the generator and run the &lt;code&gt;Generate&lt;/code&gt; test.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Repeat the previous step as many times as needed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example I&amp;rsquo;ve created a codegenerator that generates constructors and a simple &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.xml.serialization.ixmlserializable(v=vs.110).aspx&#34;&gt;IXmlSerializable&lt;/a&gt; implementation for immutable message classes. &lt;a href=&#34;https://github.com/resc/wpfmagic/tree/master/GenerateAllTheThings&#34;&gt;See the full code here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This CodeWriter class helps keeping track of blocks and code indentation. I use it to write out code that reads as if it&amp;rsquo;s hand coded, because I like it that way.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt; /// &amp;lt;summary&amp;gt; CodeWriter keeps track of indentation and blocks, to simplify writing code. &amp;lt;/summary&amp;gt;
    public class CodeWriter : TextWriter
    {
        /// &amp;lt;summary&amp;gt; Creates a new file, or truncates an existing file &amp;lt;/summary&amp;gt;
        public static CodeWriter CreateFile(string filepath)
        {
            return new CodeWriter(File.Open(filepath, FileMode.Create, FileAccess.Write, FileShare.Read));
        }

        private readonly TextWriter _w;
        private char _newline;
        private char[] _ignored
            ;
        private bool _writeIndent;
        private int _indentLevel;

        public CodeWriter() : this(new StringWriter())
        {
        }

        public CodeWriter(Stream s) : this(new StreamWriter(s))
        {
        }

        public CodeWriter(TextWriter w)
        {
            _w = w;
            SetNewLine(w.NewLine);
            IndentText = &amp;quot;    &amp;quot;;
            BlockStart = &amp;quot;{&amp;quot;;
            BlockEnd = &amp;quot;}&amp;quot;;
            BlockCommentStart = &amp;quot;/*&amp;quot;;
            BlockCommentEnd = &amp;quot;*/&amp;quot;;
            CommentStart = &amp;quot;//&amp;quot;;
            CommentEnd = w.NewLine;
        }

        public string IndentText { get; set; }

        public string BlockStart { get; set; }
        public string BlockEnd { get; set; }

        public string BlockCommentStart { get; set; }
        public string BlockCommentEnd { get; set; }

        public string CommentStart { get; set; }
        public string CommentEnd { get; set; }

        public override Encoding Encoding
        {
            get { return _w.Encoding; }
        }

        public override string NewLine
        {
            get { return _w.NewLine; }
            set { SetNewLine(value); }
        }

        public override void Write(char value)
        {
            WriteIndent();
            if (value == _newline)
                _writeIndent = true;

            // normalize line endings...
            if (value == _newline)
                _w.Write(NewLine);
            else if (!_ignored.Contains(value))
                _w.Write(value);
        }

        /// &amp;lt;summary&amp;gt; Indents the code a level &amp;lt;/summary&amp;gt;
        public IDisposable Indent()
        {
            _indentLevel++;
            return Disposable.Create(Dedent);
        }

        /// &amp;lt;summary&amp;gt; Writes a block &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&amp;quot;trailer&amp;quot;&amp;gt;text to immediatly follow the closing brace, before the newline. usually a ;&amp;lt;/param&amp;gt;
        public IDisposable Block(string trailer = null)
        {
            WriteLine(BlockStart);
            var d = Indent();
            return Disposable.Create(() =&amp;gt;
            {
                d.Dispose();
                WriteLine($&amp;quot;{BlockEnd}{trailer}&amp;quot;);
            });
        }

        /// &amp;lt;summary&amp;gt; Writes a block comment&amp;lt;/summary&amp;gt;
        public IDisposable BlockComment()
        {
            WriteLine(BlockCommentStart);
            var d = Indent();
            return Disposable.Create(() =&amp;gt;
            {
                d.Dispose();
                WriteLine($&amp;quot;{BlockCommentEnd}&amp;quot;);
            });
        }

        public void WriteComment(string comment)
        {
            Write(CommentStart);
            Write(comment.Replace(CommentEnd, $&amp;quot;{NewLine}{CommentStart}&amp;quot;));
            Write(CommentEnd);
        }

        public override void Flush()
        {
            _w.Flush();
        }

        public override string ToString()
        {
            return _w.ToString();
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                Flush();
                _w.Dispose();
            }

            base.Dispose(disposing);
        }

        private void SetNewLine(string value)
        {
            if (string.IsNullOrEmpty(value))
                throw new ArgumentOutOfRangeException(nameof(value), &amp;quot;Newline cannot be null or empty&amp;quot;);
            _w.NewLine = value;
            _newline = value.ToCharArray().Last();
            _ignored = value.ToCharArray().Except(new[] {_newline}).ToArray();
        }

        private void Dedent()
        {
            _indentLevel--;
        }

        private void WriteIndent()
        {
            if (_writeIndent)
            {
                for (int i = 0; i &amp;lt; _indentLevel; i++)
                    _w.Write(IndentText);

                _writeIndent = false;
            }
        }
    }


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cancel That Please</title>
      <link>https://resc.github.io/post/cancel-that-please/</link>
      <pubDate>Sat, 25 Jun 2016 00:00:00 +0200</pubDate>
      <author>remco.schoeman&#43;nospambotsplease@gmail.com (Remco Schoeman)</author>
      <guid>https://resc.github.io/post/cancel-that-please/</guid>
      <description>

&lt;p&gt;I was working with the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.windows.controls.tabcontrol(v=vs.110).aspx&#34;&gt;TabControl&lt;/a&gt; the other day
 and I wanted to prevent the user from abandoning the task he was currently performing by cancelling the selection of a new tab.&lt;/p&gt;

&lt;p&gt;This was more difficult than expected because &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.windows.controls.primitives.selector(v=vs.110).aspx&#34;&gt;Selector&lt;/a&gt;
 does not implement a SelectionChanging event with which you can cancel the selection changes.&lt;/p&gt;

&lt;p&gt;Enter the  &lt;em&gt;SelectorAttachedProperties.HasActivatableSupport&lt;/em&gt; dependency property. Together with an &lt;em&gt;IActivatable&lt;/em&gt; interface that is implemented by the model for the tab page it will take care of the nasty details of cancelling a selection.&lt;/p&gt;

&lt;p&gt;the &lt;em&gt;Activate&lt;/em&gt; and &lt;em&gt;Deactivate&lt;/em&gt; methods wil get called on the model when a tab is switched, and if  &lt;em&gt;Deactivate&lt;/em&gt; returns false the tab won&amp;rsquo;t switch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/resc/wpfmagic/tree/master/SelectorAttachedPropertiesHasActivatableSupport&#34;&gt;See the full code here&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xaml&#34;&gt; &amp;lt;TabControl utils:SelectorAttachedProperties.HasActivatableSupport=&amp;quot;True&amp;quot;&amp;gt;
  &amp;lt;!-- ... --&amp;gt;
&amp;lt;/TabControl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    /// &amp;lt;summary&amp;gt; IActivatable should be implemented by a ViewModel. &amp;lt;/summary&amp;gt;
    public interface IActivatable
    {
        /// &amp;lt;summary&amp;gt; Called when the module is activated. &amp;lt;/summary&amp;gt;
        void Activate();

        /// &amp;lt;summary&amp;gt; Return true to continue with deactivation, false to cancel deactivation. &amp;lt;/summary&amp;gt;
        bool Deactivate();
    }

    public static class SelectorAttachedProperties
    {
        private static readonly Type _ownerType = typeof(SelectorAttachedProperties);

        private static readonly ConditionalWeakTable&amp;lt;Selector, ActivationHandler&amp;gt; _handlers = new ConditionalWeakTable&amp;lt;Selector, ActivationHandler&amp;gt;();


        public static readonly DependencyProperty HasActivatableSupportProperty =
            DependencyProperty.RegisterAttached(&amp;quot;HasActivatableSupport&amp;quot;, typeof(bool), _ownerType,
            new PropertyMetadata(false, HasActivatableSupportChanged));

        public static bool GetHasActivatableSupport(DependencyObject obj)
        {
            return (bool)obj.GetValue(HasActivatableSupportProperty);
        }

        public static void SetHasActivatableSupport(DependencyObject obj, bool value)
        {
            obj.SetValue(HasActivatableSupportProperty, value);
        }

        private static void HasActivatableSupportChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var selector = d as Selector;
            if (selector == null || !(e.OldValue is bool &amp;amp;&amp;amp; e.NewValue is bool) || e.OldValue == e.NewValue)
                return;

            var enableActivatableSupport = (bool)e.NewValue;
            var handler = _handlers.GetOrCreateValue(selector);

            TypeDescriptor.GetProperties(selector)[&amp;quot;ItemsSource&amp;quot;].RemoveValueChanged(selector, handler.OnItemsSourceChanged);
            selector.SelectionChanged -= handler.OnSelectionChanged;

            if (enableActivatableSupport)
            {
                selector.IsSynchronizedWithCurrentItem = true;
                TypeDescriptor.GetProperties(selector)[&amp;quot;ItemsSource&amp;quot;].AddValueChanged(selector, handler.OnItemsSourceChanged);
                selector.SelectionChanged += handler.OnSelectionChanged;
            }
        }

        private class ActivationHandler
        {
            ICollectionView _collectionView;

            public void OnItemsSourceChanged(object sender, EventArgs e)
            {
                var selector = sender as Selector;
                if (selector != null)
                {
                    var itemsSource = selector.ItemsSource;
                    _collectionView = itemsSource as ICollectionView ?? CollectionViewSource.GetDefaultView(itemsSource);
                    _collectionView.CurrentChanging += OnCurrentChanging;
                    _collectionView.CurrentChanged += OnCurrentChanged;
                }
            }

            public void OnSelectionChanged(object sender, SelectionChangedEventArgs args)
            {
                var collectionView = _collectionView;
                if (collectionView == null) return;

                var selector = sender as Selector;
                if (selector == null) return;

                if (selector.IsSynchronizedWithCurrentItem == true &amp;amp;&amp;amp; selector.SelectedItem != collectionView.CurrentItem)
                {
                    selector.IsSynchronizedWithCurrentItem = false;
                    selector.SelectedItem = collectionView.CurrentItem;
                    selector.IsSynchronizedWithCurrentItem = true;
                }
            }

            private void OnCurrentChanging(object sender, CurrentChangingEventArgs e)
            {
                var activatable = (sender as ICollectionView)?.CurrentItem as IActivatable;
                if (activatable?.Deactivate() == false)
                {
                    if (e.IsCancelable)
                        e.Cancel = true;
                }
            }

            private void OnCurrentChanged(object sender, EventArgs e)
            {
                var activatable = (sender as ICollectionView)?.CurrentItem as IActivatable;
                activatable?.Activate();
            }
        }
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;references-that-inspired-this-post&#34;&gt;References That Inspired This Post&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/30706758/how-to-cancel-tab-change-in-wpf-tabcontrol&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coderelief.net/2011/11/07/fixing-issynchronizedwithcurrentitem-and-icollectionview-cancel-bug-with-an-attached-property/&#34;&gt;CodeRelief.NET&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>WPF Magic Without Frameworks</title>
      <link>https://resc.github.io/post/wpf-magic/</link>
      <pubDate>Sat, 04 Jun 2016 11:10:02 +0200</pubDate>
      <author>remco.schoeman&#43;nospambotsplease@gmail.com (Remco Schoeman)</author>
      <guid>https://resc.github.io/post/wpf-magic/</guid>
      <description>

&lt;p&gt;Building WPF applications is challenging is you&amp;rsquo;re new to WPF.
There are lots of frameworks, components and toolkits to choose from and WPF is no small framework itself.
I&amp;rsquo;ll show you some tricks to build a WPF UI without toolkits but with magic.&lt;/p&gt;

&lt;p&gt;But first some basic concepts I&amp;rsquo;ll use a lot.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A &lt;em&gt;View&lt;/em&gt; is WPF FrameworkElement or a control derived from it.&lt;/li&gt;
&lt;li&gt;A  &lt;em&gt;ViewModel&lt;/em&gt; will be (in) the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.windows.frameworkelement.datacontext(v=vs.110).aspx&#34;&gt;DataContext&lt;/a&gt; of the view and contain everything the view needs to do its viewy things.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;DataModel&lt;/em&gt; contains the actual data that the user cares about and will be put in properties on the viewmodel.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ms742521(v=vs.100).aspx&#34;&gt;DataTemplates&lt;/a&gt;&lt;/em&gt; are WPF&amp;rsquo;s way to say &amp;ldquo;I want this model bound to this view structure&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ms742521(v=vs.100).aspx&#34;&gt;Styles&lt;/a&gt;&lt;/em&gt; are WPF&amp;rsquo;s way to say &amp;ldquo;I want this view to be configured in this way&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;show-me-the-magic&#34;&gt;Show Me The Magic!&lt;/h1&gt;

&lt;p&gt;Ok, I&amp;rsquo;m going to make Views magically appear when we bind a ContentControl.Content property to a model.
and because a good programmer is a lazy programmer I&amp;rsquo;ll use convention over configuration to do so.&lt;/p&gt;

&lt;p&gt;The conventions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;View type names end with &amp;lsquo;View&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Model type names end with &amp;lsquo;Model&amp;rsquo;&lt;/li&gt;
&lt;li&gt;View and Model live right next to each other in the same namespace and assembly.&lt;/li&gt;
&lt;li&gt;ContentControls are magic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To turn the magic on I&amp;rsquo;ll create a custom DataTemplateSelector that finds the right View for the model bound to the ContentControl.Content property. and set the ContentControl.ContentTemplateSector with it.&lt;/p&gt;

&lt;p&gt;And because magic is only magic if it happens without manual labour I&amp;rsquo;ll put a Style for ContentControl in the application level resources so every ContentControl gets that ContentTemplateSelector.&lt;/p&gt;

&lt;p&gt;In App.xaml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xaml&#34;&gt;&amp;lt;Application.Resources&amp;gt;
    &amp;lt;!--Create the DataTemplateSelector --&amp;gt;
    &amp;lt;conventions:ConventionDataTemplateSelector x:Key=&amp;quot;ConventionDataTemplateSelector&amp;quot; /&amp;gt;
    
    &amp;lt;!-- Modify ContentControl to use ConventionDataTemplateSelector for its Content--&amp;gt;
    &amp;lt;Style TargetType=&amp;quot;ContentControl&amp;quot;&amp;gt;
        &amp;lt;Setter Property=&amp;quot;ContentTemplateSelector&amp;quot; Value=&amp;quot;{StaticResource ConventionDataTemplateSelector}&amp;quot; /&amp;gt;
    &amp;lt;/Style&amp;gt;
&amp;lt;/Application.Resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the code for the ConventionDataTemplateSelector:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;   
    public class ConventionDataTemplateSelector : DataTemplateSelector
    {
        // cache the templates until the model goes away
        private readonly ConditionalWeakTable&amp;lt;object, DataTemplate&amp;gt; _templatesCache = new ConditionalWeakTable&amp;lt;object, DataTemplate&amp;gt;();

        const string Model = &amp;quot;Model&amp;quot;;
        const string View = &amp;quot;View&amp;quot;;

        public override DataTemplate SelectTemplate(object item, DependencyObject container)
        {
            // Don&#39;t use the selector in design mode in Visual Studio
            if (DesignerProperties.GetIsInDesignMode(container))
                return base.SelectTemplate(item, container);

            if (item != null)
            {
                lock (_templatesCache)
                {
                    DataTemplate template;
                    if (_templatesCache.TryGetValue(item, out template))
                        return template;

                    var templateType = GetTemplateTypeFor(item, container);
                    template = new DataTemplate
                    {
                        VisualTree = new FrameworkElementFactory
                        {
                            Type = templateType
                        }
                    };

                    _templatesCache.Add(item, template);
                    return template;
                }
            }

            return base.SelectTemplate(null, container);
        }

        public virtual Type GetTemplateTypeFor(object item, DependencyObject container)
        {
            var type = item.GetType();
            try
            {
                if (!type.Name.EndsWith(Model, StringComparison.Ordinal))
                {
                    throw new TypeLoadException($&amp;quot;type {type} does not conform to the conventions or a viewmodel,&amp;quot; +
                                                $&amp;quot; the type&#39;s name should end with &#39;{Model}&#39;&amp;quot;);
                }

                var viewTypeName = type.FullName;
                viewTypeName = viewTypeName.Substring(0, viewTypeName.Length - Model.Length) + View;

                try
                {
                    // Load the view type from the same assembly as the model type.
                    var templateTypeFor = type.Assembly.GetType(viewTypeName, true);
                    return templateTypeFor;
                }
                catch (Exception e)
                {
                    throw new TypeLoadException($&amp;quot;{GetType().Name}: Error loading view type {viewTypeName} for model {type}: {e.Message}&amp;quot;, e);
                }
            }
            catch (TypeLoadException)
            {
                throw;
            }
            catch (Exception e)
            {
                throw new TypeLoadException($&amp;quot;{GetType().Name}: Error loading view for model {type}: {e.Message}&amp;quot;, e);
            }
        }
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href=&#34;https://github.com/resc/wpfmagic/tree/master/ConventionDataTemplateSelector&#34;&gt;the full code here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>